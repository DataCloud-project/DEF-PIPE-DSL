Workflow: 
‘workflow‘ workflowName = ID ‘{‘
	(‘communicationMedium:’ medium = CommunicationMediumType)?
	(EnvironmentParameters)?
‘steps:’ Steps
‘}’;

Steps: 
	(‘-‘ StepTypes (Step|SubWorkflow) )+ 

Step:
	name = ID
	(‘implementation:’ StepImplementation)?
('triggers:' (triggers += Trigger (',' triggers += Trigger)*)+ )?
(EnvironmentParameters)?
	(ControlParameters)?
(‘resourceProvider:’ (providers += ResourceProvider (',' providers += ResourceProvider)*)+ )?
(‘executionRequirements:’ ExecutionRequirement)
(‘dataSource:’ name=STRING)?
(
‘previous:’ (
‘none’|
‘[‘ previousSteps+=STRING (‘, ‘ previousSteps=STRING)* ‘]’)
)
)?
	
SubWorkflow:
	‘SubWorkflow’ name = ID ‘{‘ Steps ‘}’

StepTypes: ‘data-source’ | ‘data-processing’ | ‘data-sink’

enum CommunicationMediumType: 
MESSAGE_QUEUE | DISTRIBUTED_FILE_SYSTEM | WEB_SERVICE;

enum ComparisonOperatorType: 
EQUAL | LESS_THAN | GREATER_THAN | NOT_EQUAL | EQUAL_LESS_THAN | EQUAL_GREATER_THAN

enum LogicalOperatorType: AND | XOR | OR

enum DeploymentLayers: EDGE | FOG | CLOUD

enum TimeUnits: SECOND | MINUTE | HOUR | DAY | WEEK | MONTH

enum OperatorType: INCREMENT | DECREMENT | DIVISION | MULTIPLY

Environment Parameters Package
EnvironmentParameters: 
‘environmentParameters: {‘ 
	(parameterName = ID ‘:’ parameterValue = STRING)+
‘}’

Execution Parameters Package
ExecutionRequirement: 
	HardRequirements |
	SoftRequirements ;

HardRequirements: OSOrImageRequirements |ScaleRequirements |  | SecurityRequirements | ServiceLevelObjective ;

OSOrImageRequirements : ImageRequirements | OSRequirements ;

ImageRequirements: ‘image-requirement’ name = ID ‘{‘
      ‘image-id:’ imageIdName = STRING ‘}’; 

OSRequirements: ‘os-requirement’ name = ID ‘{‘
     ( ‘os-type:’ Type = STRING)
     (‘is-64:’ is64 = BOOLEAN)
‘}’;

ScaleRequirements : VerticalScaleRequirements | HorizontalScaleRequirements;

VerticalScaleRequirements : ‘vertical-scale’ name = ID ‘{‘
     ( ‘min-cpu:’ mincpu  = DOUBLE)
     (‘max-cpu:’ maxcpu  = DOUBLE)
     (‘min-ram:’ minram  = INT)
     (‘max-ram:’ maxram  = INT)
     (‘min-cores:’ mincores  = INT)
     (‘min-storage:’ minstorage  = INT)
     (‘max-storage:’ maxstorage  = INT)
‘}’;

HorizontalScaleRequirements : ‘horizontal-scale’ name = ID ‘{‘
     (‘min-instance:’ mininstance = INT)
     (‘max-instance:’ maxinstance = INT)
‘}’;

HardwareRequirements : QuantitativeHardwareRequirements
QualitativeHardwareRequirements | ArchitectureRequirements | NetworkRequirements ;

QuantitativeHardwareRequirements: ‘quantitative’ name = ID ‘{‘
     ( ‘min-cpu:’ mincpu  = DOUBLE)
     (‘max-cpu:’ maxcpu  = DOUBLE)
     (‘min-ram:’ minram  = INT)
     (‘max-ram:’ maxram  = INT)
     (‘min-cores:’ mincores  = INT)
     (‘min-storage:’ minstorage  = INT)
     (‘max-storage:’ maxstorage  = INT)
     (‘cpu-frequency:’ cpufrequency  = FLOAT)
     (‘cpu-no-cores:’ cpunumberofcores  = INT)
     (‘gpu-availability:’ gpuavailability  = BOOLEAN)
 ‘}’; 

QualitativeHardwareRequirements: ‘qualitative’ name = ID ‘{‘
     ( ‘min-benchmark:’ minbenchmark = DOUBLE)
     (‘max-benchmark:’ maxbenchmark = DOUBLE)
‘}’;

ArchitectureRequirements: ‘architecture’ name = ID ‘{‘
     ( ‘cpu-architecture:’ cpuarchitecture = STRING)
      ( ‘gpu-architecture:’ gpuarchitecture = STRING)
‘}’;

NetworkRequirements: ‘network’ name = ID ‘{‘
     ( ‘min-bandwidth:’ minbandwidth  = DOUBLE)
     (‘max-bandwidth:’ maxbandwidth  = DOUBLE)
     (‘min-latency:’ minlatency  = DOUBLE)
     (‘max-latency:’ maxlatency  = DOUBLE)
‘}’;

SequrityRequirements : 
‘security-requirement:’ 
	‘[‘
( ‘{ security-control:’ securityName = ID ‘, specification:’ securitySpecification= STRING }’) ?
    ‘]’;

ServiceLevelObjective : 
‘service-objective:’ 
		‘[‘
        ‘{‘ service-condition:’ conditionName = ID 
(‘operator:’ operator =ComparisonOperatorType)
				 (‘threshold:’ threshold = DOUBLE)
				 (‘validity’ : validity = STRING) ‘}’ ?
 ‘]’;


Trigger Package
Trigger:	ScheduleTrigger | ExternalEventTrigger | OneTimeTrigger | Polling;

Polling:	
(PollDatabase | PollMessageQueue | PollWebService)
(‘condition:’ condition = AbstractCondition)
(‘retries:’ retries = INT)
(‘interval:’ interval = INT)
;

ScheduleTrigger:	CronSchedule | IntervalSchedule;

ExternalEventTrigger:
	{ExternalEventTrigger}
	‘external-event’;

OneTimeTrigger:
	{OneTimeTrigger}
	‘one-time’
	(‘startTime:’ startTime = STRING);

CronSchedule:
	{CronSchedule}
	‘cron’
	(‘cron:’ cron = STRING);

IntervalSchedule:
	{IntervalSchedule}
	‘interval-schedule’
	(‘frequency:’ frequency = TimeUnits)
	(‘interval:’ interval = INT)
	(‘startTime:’ startTime = STRING);

PollDatabase:
	‘PollDatabase’ name = ID 
	‘{‘
(‘credential:’ credential = ID)
(‘queryScriptName:’ script = STRING)
‘}’;
	

PollMessageQueue:
	‘PollMessageQueue’ name = ID 
	‘{‘
(‘credential:’ credential = ID)
(‘queryScriptName:’ script = STRING)
‘}’;


PollWebService:
	‘PollWebService’ name = ID 
	‘{‘
(‘credential:’ credential = ID)
(‘queryScriptName:’ script = STRING)
‘}’;


Resource Provider Package
ResourceProvider : CloudProvider | EdgeProvider | FogProvider ;

CloudProvider : ‘cloud-provider’ name = ID ‘{‘
	(‘provider-location:’ providerlocation = STRING)
	(‘mapping-location:’ mappinglocation = STRING)
 ‘}’;

EdgeProvider : ‘edge-provider’ name = ID ‘{‘
	(‘provider-location:’ providerlocation = STRING)
	(‘mapping-location:’ mappinglocation = STRING)
 ‘}’;

FogProvider : ‘fog-provider’ name = ID ‘{‘
	(‘provider-location:’ providerlocation = STRING)
	(‘mapping-location:’ mappinglocation = STRING)
 ‘}’;

Data Source Package
InputDataSource: 
InputDataSourceBlock | 
InputDataSourceDatabase | 
InputDataSourceMessageQueue | 
InputDataSourceWebApi;

InputDataSourceBlock: InputDataSourceFtp | InputDataSourceSftp;

InputDataSourceFtp: ‘InputDataSourceFtp’ name = ID ‘{‘
	‘credential:’ credentailName = STRING ‘}’;

InputDataSourceSftp: ‘InputDataSourceSftp’ name = ID ‘{‘
	‘credential:’ credentailName = STRING ‘}’;

InputDataSourceDatabase: ‘InputDataSourceDatabase’ name = ID ‘{‘
	‘credential:’ credentailName = STRING ‘}’;

InputDataSourceMessageQueue: ‘InputDataSourceMessageQueue’ name = ID ‘{‘
	‘credential:’ credentailName = STRING ‘}’;

InputDataSourceWebApi: ‘InputDataSourceWebApi’ name = ID ‘{‘
	‘credential:’ credentailName = STRING ‘}’;

DataSourceCredentials: BlockStorageCredentials | DatabaseCredentials |
								MessageQueueCredentials | WebServiceCredentials;

BlockStorageCredentials: ‘DatabaseCredentials’ name = ID ‘{}’;
DatabaseCredentials: ‘DatabaseCredentials’ name = ID ‘{}’;
MessageQueueCredentials: ‘MessageQueueCredentials’ name = ID ‘{}’;
WebServiceCredentials: ‘WebServiceCredentials’ name = ID ‘{}’;


Control Parameters Package
ControlParameter: ‘controlParameters:’
	(PreCondition | PostCondition)?
	(‘loop:’ (WhileLoop | ForLoop))
;

PreCondition:
‘precondition:’ 
‘[‘ 
‘{ condition:’ conditionName = ID ‘, inputStep:’ stepName=ID ‘}’
(
‘, {condition:’ conditionName = ID ‘, inputStep:’ stepName=ID ‘}’
)*
‘]’
(‘operator’ conditionAggregation = LogicalOperatorType);

PostCondition:
‘postcondition:’ 
‘[‘ 
‘{ condition:’ conditionName = ID ‘, outputStep:’ stepName=ID ‘}’
(
‘, {condition:’ conditionName = ID ‘, outputStep:’ stepName=ID ‘}’
)*
‘]’;

WhileLoop:
	{WhileLoop}
	‘while’
	(‘condition:’ condition_name=ID)
	(‘atLeastOnce:’ isDoWhile= BOOL_LITERAL);

ForLoop:
	{ForLoop}
	‘for’
	(‘from:’ fromValue= DOUBLE)
	(‘to:’ toValue= DOUBLE)
	(‘stepSize:’ stepSize= INT)
	(‘operator:’ operatorType: OperatorType);

AbstractCondition: ‘Condition {’ (CompositeCondition | Condition) ‘}’;

CompositeCondition:	
	(
‘conditions: [‘ 
(conditionName = ID ‘,’)*
conditionName = ID
‘]’
)
	(‘operator:’ aggregatorOperator= LogicalOperatorType);

Condition:
	(‘target:’ targetStr = STRING)
	(‘processingScriptName:’ scriptName = STRING);
