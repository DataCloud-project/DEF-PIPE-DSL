grammar org.xtext.datacloud.def_pipe.Dsl with org.eclipse.xtext.common.Terminals

generate dsl "http://www.xtext.org/datacloud/def_pipe/Dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore // This import is used for using boolean type.

	
DSLModel:
	Pipeline += (Pipeline | SubPipelineDefinition | 
		CredentialDefinition |
		TriggerPollingDefinition |
		ResourceProviderDefinition |
		InputDataSourceDefinition
	)*;


Pipeline:
	'Pipeline' 
	name=ID 
	'{'		
		('communicationMedium:' communicationMedium = CommunicationMedium)
		('environmentParameters:' '{' (params += EnvironmentParameter (',' params += EnvironmentParameter)*) '}')?
		('steps:' ('-' StepTypes steps+=(Step|SubPipeline) ('-' StepTypes steps+=(Step|SubPipeline))*))	
	'}';
	
EnvironmentParameter:	(name=ID ( ':' value = ParameterValueTypes)?);

CommunicationMedium:	'medium' type = CommunicationMediumTypes;

StepTypes: 'data-source' | 'data-processing' | 'data-sink';

SubPipeline: 'subPipeline' name=[SubPipelineDefinition]
	('implementation:' implementation = StepImplementation)
	('dataSource:' dataSource = [InputDataSourceDefinition])?
	('triggers:' (triggers += Trigger (',' triggers += Trigger)*)+ )?
	('resourceProvider:' resourceProvider=[ResourceProviderDefinition])?
	('previous:' ('none' |  '[' (previous += [Step] (',' previous += [Step])*) ']'))?
	('executionRequirement:' requirement=ExecutionRequirement)?
;


Step: 'step' name=ID
		('implementation:' implementation = StepImplementation)?
		('dataSource:' dataSource = [InputDataSourceDefinition])?
		('triggers:' (triggers += Trigger (',' triggers += Trigger)*)+ )?
		('resourceProvider:' resourceProvider=[ResourceProviderDefinition])?
		('previous:' ('none' |  '[' (previous += [Step] (',' previous += [Step])*) ']'))?
		('executionRequirement:' requirement=ExecutionRequirement)?;  

StepImplementation:	ContainerImplementation; 	

ContainerImplementation:	'container-implementation' ('image:' imageName = STRING);


// ********* Trigger Main Packages *********


Trigger: ScheduleTrigger | ExternalEventTrigger | OneTimeTrigger | PollingTrigger;

ScheduleTrigger: IntervalSchedule | CronSchedule;

ExternalEventTrigger: 'external-event';

OneTimeTrigger: {OneTimeTrigger} 'one-time' (startTime = STRING)?;

PollingTrigger: 'polling' name=[TriggerPollingDefinition]
	('retries:' retries=INT)
	('interval:' interval=INT)
;

				
IntervalSchedule:
	{IntervalSchedule}
	'interval-schedule'
	('frequency:' frequency = TimeUnits)?
	('interval:' interval = INT)?
	('start-time:' startTime = STRING)?
;

CronSchedule:
	{CronSchedule}
	'cron-schedule'
	('start-time:' startTime = STRING)?
	('cron:' cron = STRING)?
;	
 
 
// Execution Requirements

ExecutionRequirement: 
	('hardRequirements:' HardRequirement)?
	('softRequirements:' SoftRequirement)?
;

HardRequirement: 
	(network=NetworkRequirement)?
	(qualitative=QualitativeRequirement)?
	(quantitative=QuantitativeRequirement)?
	(image=ImageRequirement)?
	(os=OSRequirement)?
	(verticalScale=VerticalScaleRequirement)?
	(horizontalScale=HorizontalScaleRequirement)?
; // | SecutirtyRequirement | ServiceLevelObjective ;


SoftRequirement: 'empty:';

NetworkRequirement:
	'networkRequirement:'
		('min-bandwidth:' minBandwidth=EDouble)?
		('max-bandwidth:' maxBandwidth=EDouble)?
		('min-latency:' minLatency=INT)?
		('max-latency:' maxLatency=INT)?
;

QualitativeRequirement:
	'qualitativeRequirement:'
		('min-benchmark:' minBenchmark=INT)?
		('max-benchmark:' maxBenchmark=INT)?
		('cpu-architecture:' cpuArchitecture = STRING)?
		('gpu-architecture:' gpuArchitecture = STRING)?
;

QuantitativeRequirement:
	'quantitativeRequirement:'
		( 'min-cpu:' minCpu = EDouble)?
		( 'max-cpu:' maxCpu = EDouble)?
		( 'min-ram-mb:' minRamMB = INT)?
		( 'max-ram-mb:' maxRamMB = INT)?
		( 'min-storage-mb:' minStrageMB = INT)?
		( 'max-storage-mb:' maxStorageMB = INT)?
		( 'cpu-frequency:'  cpuFrequency = EDouble)?
		( 'cpu-no-core:' cpuNumberOfCores = INT)?
		( 'gpu-availability:' gpuAvail = BooleanValueType)? 
;

ImageRequirement:
	'imageRequirement:'
		'image-id:' imageName = STRING
;

OSRequirement: 
	'osRequirement:'
		('os-type:' type=STRING)?
		('is-64:' is64=INT)?
;

ScaleRequirement: VerticalScaleRequirement | HorizontalScaleRequirement;

VerticalScaleRequirement:
	'verticalScale:'
		('min-cpu:' minCpu=EDouble)?
		('max-cpu:' maxCpu=EDouble)?
		('min-ram-mb:' minRam=INT)?
		('max-ram-mb:' maxRam=INT)?
		('min-cores:' minCore=INT)?
		('min-storage-mb:' minStorage=INT)?
		('max-storage-mb:' maxStorage=INT)?
;

HorizontalScaleRequirement: 
	'horizontalScale:'
		('min-instance:' minInstance=INT)?
		('max-instance:' maxInstance=INT)?
;

////SecutirtyRequirement:
////	'security-requirement' name = ID '{' (securityControl=SecurityControl)+ '}';
////
////SecurityControl:
////	'security-control' name=ID '{'
////	('specification' securitySpecification=STRING)
////	'}'
////;
////
////ServiceLevelObjective:
////	'service-objective' name = ID '{'
////	 ('service-condition:' conditionName = STRING)
////	 ( 'operator:' operator = STRING) //TODO must change to ComparisonOperator
////	 ( 'threshold:' threshold = EDouble)
////	 ( 'validity:' validity = STRING) ?
////	 '}'
////;



// ********* Separate Block Definitions *********


// 1. SubPipeline

SubPipelineDefinition: 'SubPipeline' name=ID 
	'{'	
	 ('implementation:' implementation = StepImplementation)
	'}';
	
	

// 2. Triggers
	
TriggerPollingDefinition: 
	(
		'PollDatabase' name=ID '{' trigger=TriggerPollDatabase '}' | 
		'PollMessageQueue' name=ID '{' trigger=TriggerPollMessageQueue '}' | 
		'PollWebService' name=ID '{' trigger=TriggerPollWebService '}'
	)
;

TriggerPollDatabase:
	('credential:' credentialName=[DatabaseCredentials])
	('queryScriptName:' scriptName=STRING)
;

TriggerPollMessageQueue:
	('credential:' credentialName=[MessageQueueCredentials])
	('consumerQueueName:' scriptName=STRING)
;

TriggerPollWebService:
	('credential:' credentialName=[WebApiCredentials])
;
	
// 3. Credentials 

CredentialDefinition: DatabaseCredentials | MessageQueueCredentials | WebApiCredentials | BlockStorageCredentials;

DatabaseCredentials: 'DatabaseCredentials' name=ID '{' '}'; // Not clear what attributes it should have!
MessageQueueCredentials: 'MessageQueueCredentials' name=ID '{' '}'; // Not clear what attributes it should have!
WebApiCredentials: 'WebApiCredentials' name=ID '{' '}'; // Not clear what attributes it should have!
BlockStorageCredentials: 'BlockStorageCredentials' name=ID '{' '}'; // Not clear what attributes it should have!


// 4. Resource Provider

ResourceProviderDefinition: (CloudProviderDefinition | EdgeProviderDefinition | FogProviderDefinition) name=ID 
	'{' 
		('providerLocation:' providerlocation =STRING) 
		('mappingLocation:' mappinglocation=STRING) 
	'}'
;

CloudProviderDefinition : 'CloudProvider' ;
EdgeProviderDefinition : 'EdgeProvider';
FogProviderDefinition: 'FogProvider';


// 5. Input Datasource

InputDataSourceDefinition: 
	InputDataSourceBlockDefinition | 
	InputDataSourceDatabaseDefinition | 
	InputDataSourceMessageQueueDefinition |
	InputDataSourceWebApiDefinition
;

InputDataSourceBlockDefinition: InputDataSourceFtpDefinition | InputDataSourceSftpDefinition; 


InputDataSourceFtpDefinition: 'InputDataSourceFtp' name = ID '{' 'credential:' credentailName=[BlockStorageCredentials] '}'; 
InputDataSourceSftpDefinition: 'InputDataSourceSftp' name = ID '{' 'credential:' credentailName=[BlockStorageCredentials] '}'; 
InputDataSourceDatabaseDefinition: 'InputDataSourceDatabase' name = ID '{' 'credential:' credentailName=[DatabaseCredentials] '}'; 
InputDataSourceMessageQueueDefinition: 'InputDataSourceMessageQueue' name = ID '{' 'credential:' credentailName=[MessageQueueCredentials] '}'; 
InputDataSourceWebApiDefinition: 'InputDataSourceWebApi' name = ID '{' 'credential:' credentailName=[WebApiCredentials] '}'; 


 
 
// ********* Data Types *********

ParameterValueTypes: 
	{StringType} value = STRING |
	{IntType} value = INT |
	{BoolType} value = BOOL_LITERAL |
	{Identifier} value = ID;

BooleanValueType: {BoolType} value = BOOL_LITERAL;

enum CommunicationMediumTypes:
 	MESSAGE_QUEUE | DISTRIBUTED_FILE_SYSTEM | WEB_SERVICE;

enum TimeUnits: SECOND | MINUTE | HOUR | DAY | WEEK | MONTH;

terminal BOOL_LITERAL returns ecore::EBoolean: 'true' | 'false';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';
