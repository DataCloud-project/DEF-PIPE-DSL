/**
 */
package se.kth.datacloud.dsl.dsl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import se.kth.datacloud.dsl.dsl.util.DslAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DslItemProviderAdapterFactory extends DslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.Pipeline} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PipelineItemProvider pipelineItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.Pipeline}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPipelineAdapter() {
		if (pipelineItemProvider == null) {
			pipelineItemProvider = new PipelineItemProvider(this);
		}

		return pipelineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.CommunicationMedium} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationMediumItemProvider communicationMediumItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.CommunicationMedium}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationMediumAdapter() {
		if (communicationMediumItemProvider == null) {
			communicationMediumItemProvider = new CommunicationMediumItemProvider(this);
		}

		return communicationMediumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.ContainerImplementation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerImplementationItemProvider containerImplementationItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.ContainerImplementation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerImplementationAdapter() {
		if (containerImplementationItemProvider == null) {
			containerImplementationItemProvider = new ContainerImplementationItemProvider(this);
		}

		return containerImplementationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.CompositeStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeStepItemProvider compositeStepItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.CompositeStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeStepAdapter() {
		if (compositeStepItemProvider == null) {
			compositeStepItemProvider = new CompositeStepItemProvider(this);
		}

		return compositeStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.ParameterGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterGroupItemProvider parameterGroupItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.ParameterGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterGroupAdapter() {
		if (parameterGroupItemProvider == null) {
			parameterGroupItemProvider = new ParameterGroupItemProvider(this);
		}

		return parameterGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.DataProcesssing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataProcesssingItemProvider dataProcesssingItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.DataProcesssing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataProcesssingAdapter() {
		if (dataProcesssingItemProvider == null) {
			dataProcesssingItemProvider = new DataProcesssingItemProvider(this);
		}

		return dataProcesssingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.DataSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceItemProvider dataSourceItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.DataSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceAdapter() {
		if (dataSourceItemProvider == null) {
			dataSourceItemProvider = new DataSourceItemProvider(this);
		}

		return dataSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.kth.datacloud.dsl.dsl.DataSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSinkItemProvider dataSinkItemProvider;

	/**
	 * This creates an adapter for a {@link se.kth.datacloud.dsl.dsl.DataSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSinkAdapter() {
		if (dataSinkItemProvider == null) {
			dataSinkItemProvider = new DataSinkItemProvider(this);
		}

		return dataSinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pipelineItemProvider != null) pipelineItemProvider.dispose();
		if (communicationMediumItemProvider != null) communicationMediumItemProvider.dispose();
		if (containerImplementationItemProvider != null) containerImplementationItemProvider.dispose();
		if (compositeStepItemProvider != null) compositeStepItemProvider.dispose();
		if (parameterGroupItemProvider != null) parameterGroupItemProvider.dispose();
		if (dataProcesssingItemProvider != null) dataProcesssingItemProvider.dispose();
		if (dataSourceItemProvider != null) dataSourceItemProvider.dispose();
		if (dataSinkItemProvider != null) dataSinkItemProvider.dispose();
	}

}
