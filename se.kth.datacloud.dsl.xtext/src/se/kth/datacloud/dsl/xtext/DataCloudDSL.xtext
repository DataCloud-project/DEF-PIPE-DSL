// automatically generated by Xtext
grammar se.kth.datacloud.dsl.xtext.DataCloudDSL with org.eclipse.xtext.common.Terminals

import "http://datacloud.kth.se/dcdsl/ExecutionRequirements" as ExecutionRequirements
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://datacloud.kth.se/dcdsl" as dsl
import "http://datacloud.kth.se/dcdsl/EnvironmentVariables" as EnvironmentVariables
import "http://datacloud.kth.se/dcdsl/Triggers" as Trigger
import "http://datacloud.kth.se/dcdsl/ControlParameters" as ControlParameters
import "http://datacloud.kth.se/dcdsl/ResourceProvider" as ResourceProvider
import "http://datacloud.kth.se/dcdsl/DataSourceParameters" as DataSourceParameters

Pipeline returns dsl::Pipeline:
	'Pipeline'
	name = ID
	'{'		
		('communicationMedium:' communicationMedium = CommunicationMedium)
		('parameters:' '{' (environmentVariables += EnvironmentParameters (',' environmentVariables += EnvironmentParameters)*) '}' )? 		
		('steps:'
			(steps += AbstractStep (steps += AbstractStep)*)
		)
	'}'
;
		
		
CommunicationMedium returns dsl::CommunicationMedium:
	'medium' type = CommunicationMediumTypes;
	
	
enum CommunicationMediumTypes returns dsl::CommunicationMediumTypes:
 	MESSAGE_QUEUE | DISTRIBUTED_FILE_SYSTEM | WEB_SERVICE;
 	

EnvironmentParameters returns EnvironmentVariables::EnvironmentVariable:
	(name=ID ( ':' value = STRING)?);

AbstractStep returns dsl::AbstractStep: 
	DataSink | DataSource | DataProcessingStep | CompositeStep
;


DataSink returns dsl::DataSink:
	'-'  'data-sink' 'step' name=ID 
	('parameters:' '{' (environmentVariables += EnvironmentParameters (',' environmentVariables += EnvironmentParameters)*) '}')? 		
	('execution-parameters:' '{' executionRequirementSet = StepRequirementSet '}' )?	
	('resource-provider:' '{' (resourceProvider += ResourceProvider (',' resourceProvider += ResourceProvider)*) '}')? 		
	('data-source:' '{' dataTarget = InputDataSource '}')? 		
	('trigger:' '{' (triggers += Trigger (',' triggers += Trigger)*) '}')?	
;

DataSource returns dsl::DataSource:
	'-' 'data-source' 'step' name=ID
	('parameters:' '{' (environmentVariables += EnvironmentParameters (',' environmentVariables += EnvironmentParameters)*) '}')? 			
	('execution-parameters:' '{' executionRequirementSet = StepRequirementSet '}' )?	
	('resource-provider:' '{' (resourceProvider += ResourceProvider (',' resourceProvider += ResourceProvider)*))? '}'	
	('data-source' '{' dataSource = InputDataSource '}')?
	('trigger:' '{' (triggers += Trigger (',' triggers += Trigger)*) '}')?
;

DataProcessingStep returns dsl::DataProcesssing:
	'-' 'data-processing' 'step' name=ID 
	('parameters:' '{' (environmentVariables += EnvironmentParameters (',' environmentVariables += EnvironmentParameters)*) '}')? 			
//	('execution-parameters:' '{' executionRequirements = StepRequirementSet '}' )?
	('execution-parameters:' '{' executionRequirementSet = StepRequirementSet '}' )?	
	('resource-provider:' '{' (resourceProvider += ResourceProvider (',' resourceProvider += ResourceProvider)*) '}')? 	
	('trigger:' '{' (triggers += Trigger (',' triggers += Trigger)*) '}')? 
;

CompositeStep returns dsl::CompositeStep:
	'-'  'subpipeline' name=ID
	('environment-parameters:' '{' (environmentVariables += EnvironmentParameters (',' environmentVariables += EnvironmentParameters)*) '}')? 		
	('execution-parameters:' '{' executionRequirementSet = StepRequirementSet '}' )?	
	('resource-provider:' '{' (resourceProvider += ResourceProvider (',' resourceProvider += ResourceProvider)*) '}')?
	('trigger:' '{' (triggers += Trigger (',' triggers += Trigger)*) '}')? 
;
// Triggers

Trigger returns Trigger::Trigger:
	OneTimeTrigger | ScheduleTrigger | ExternalEventTrigger;
	
OneTimeTrigger returns Trigger::OneTimeTrigger:
	{Trigger::OneTimeTrigger} 
	'one-time'
	(startTime = STRING)?; 
		
ScheduleTrigger returns Trigger::ScheduleTrigger:
	IntervalSchedule | CronSchedule;			

ExternalEventTrigger returns Trigger::ExternalEventTrigger:
	{Trigger::ExternalEventTrigger}
	'external-event';	
	
IntervalSchedule returns Trigger::IntervalScheduleTrigger:
	{Trigger::IntervalScheduleTrigger}
	'interval-schedule'
	('frequency:' frequency = TimeUnits)?
	('interval:' interval = INT)?
	('start-time:' startTime = STRING)?;
	
CronSchedule returns Trigger::CronScheduleTrigger:
	{Trigger::CronScheduleTrigger}
	'cron-schedule'
	('start-time:' startTime = STRING)?
	('cron:' cronExpression = STRING)?;
	


// Input Datasource
InputDataSource returns DataSourceParameters::InputDataSource:
	InputDataSourceFTP | 
	InputDataSourceSFTP|
	InputDataSourceDatabase | 
	InputDataSourceMessageQueue |
	InputDataSourceWebApi
;


InputDataSourceFTP returns DataSourceParameters::FTP:
	'InputDataSourceftp' name = ID '{' 'credential:' datasourcecredentials=BlockStorageCredentials '}'
;

InputDataSourceSFTP returns DataSourceParameters::SFTP:
	'InputDataSourceSftp' name = ID '{' 'credential:' datasourcecredentials=BlockStorageCredentials '}'	
;

InputDataSourceDatabase returns DataSourceParameters::Database:
	'InputDataSourceDatabase' name = ID '{' 'credential:' datasourcecredentials=DatabaseCredentials '}'
;

InputDataSourceMessageQueue returns DataSourceParameters::MessageQueue:
	'InputDataSourceMessageQueue' name = ID '{' 'credential:' datasourcecredentials=MessageQueueCredentials '}'
;

InputDataSourceWebApi returns DataSourceParameters::WebApi:
	'InputDataSourceWebApi' name = ID '{' 'credential:' datasourcecredentials=WebApiCredentials '}'
;

DatabaseCredentials returns DataSourceParameters::DatabaseCredentials:
	'database' '{' '}';

BlockStorageCredentials returns DataSourceParameters::BlockStorageCredentials: 
	'block-storage' '{' '}';

WebApiCredentials returns DataSourceParameters::WebApiCredentials:
	'web-api' '{' '}';

MessageQueueCredentials returns DataSourceParameters::MessageQueueCredentials: 
	'message-queue' '{' '}';



// Resource Providers

ResourceProvider returns ResourceProvider::ResourceProvider:
	(CloudProvider | EdgeProvider | FogProvider)
//	'{' 
//		('providerName:' providerName = STRING) 
//		('mappingLocation:' mappingLocation=STRING) 
//	'}'
;

CloudProvider returns ResourceProvider::CloudProvider : 'CloudProvider' 
	 providerName=ID 
;
EdgeProvider returns ResourceProvider::EdgeProvider : 'EdgeProvider'
	 providerName=ID 
;
FogProvider returns ResourceProvider::FogProvider: 'FogProvider'
	 providerName=ID 
;



// Execution Requirements

StepRequirementSet returns ExecutionRequirements::ExecutionRequirementSet:
	('hardRequirements:' 
		(imageRequirement = ImageRequirement)?
		(osRequirement = OSRequirement)?
		(verticalScaleRequirement = VerticalScaleRequirement)?
		(horizontalScaleRequirement= HorizontalScaleRequirement)?
		(networkRequirement = NetworkRequirement)?
		(qualitativeHardwareRequirement = QualitativeHardwareRequirements)?
		(quantitativeHardwareRequirement = QuantitativeHardwareRequirements)?
		(securityRequirement = SecurityRequirements)?
		(serviceLevelObjective = ServiceLevelObjective)?
	)?
	
	('softRequirements:' 'empty')?
;


NetworkRequirement returns ExecutionRequirements::NetworkRequirement:
	'networkRequirement:'
		('min-bandwidth:' minBandwidth=EDouble)?
		('max-bandwidth:' maxBandwidth=EDouble)?
		('min-latency:' minLatency=INT)?
		('max-latency:' maxLatency=INT)?
;

QualitativeHardwareRequirements returns ExecutionRequirements::QualitativeHardwareRequirement:
	'qualitativeRequirement:'
		('min-benchmark:' minBenchmark=EDouble)?
		('max-benchmark:' maxBenchmark=EDouble)?
		('cpu-architecture:' cpuArchitecture = STRING)?
		('gpu-architecture:' gpuArchitecture = STRING)?
;

QuantitativeHardwareRequirements returns ExecutionRequirements::QuantitativeHardwareRequirement:
	'quantitativeRequirement:'
		( 'min-cpu:' minCpu = EDouble)?
		( 'max-cpu:' maxCpu = EDouble)?
		( 'min-ram-mb:' minRamMiB = INT)?
		( 'max-ram-mb:' maxRamMiB = INT)?
		( 'min-storage-mb:' minStorageMB = INT)?
		( 'max-storage-mb:' maxStorageMB = INT)?
		( 'cpu-frequency:'  cpuFrequency = EDouble)?
		( 'cpu-no-core:' cpuNumberOfCores = INT)?
		( 'gpu-availability:' gpuAvailability = BOOL_LITERAL)? 
;

ImageRequirement returns ExecutionRequirements::ImageRequirement:
	'imageRequirement:'
	'image-id:' imageId = STRING
;

OSRequirement returns ExecutionRequirements::OSRequirement:
	'osRequirement:'
		('os-type:' osType=STRING)?
		('is-64:' is64os=BOOL_LITERAL)?
;
VerticalScaleRequirement returns ExecutionRequirements::VerticalScaleRequirement :
	'verticalScale:'
		('min-cpu:' minCpu=EDouble)?
		('max-cpu:' maxCpu=EDouble)?
		('min-ram-mb:' minRamMiB=INT)?
		('max-ram-mb:' maxRamMiB=INT)?
		('min-cores:' minCores=INT)?
		('max-cores:' maxCores=INT)?
		('min-storage-mb:' minStorageMB=INT)?
		('max-storage-mb:' maxStorageMB=INT)?
;

HorizontalScaleRequirement returns ExecutionRequirements::HorizontalScaleRequirement:
	'horizontalScale:'
		('min-instance:' minInstance=INT)?
		('max-instance:' maxInstance=INT)?
;


SecurityRequirements returns ExecutionRequirements::SecurityRequirement:
	'{'
		('parameters:' securityParameters+=SecurityControl (',' securityParameters += SecurityControl)*)
	'}'
;

SecurityControl returns ExecutionRequirements::SecurityControl:
	'security-control' name = ID
	'{'
		('specification'  specification = STRING)?
	'}'
;

ServiceLevelObjective returns ExecutionRequirements::ServiceLevelObjective:
	'service-objective'
	customServiceLevel = ServiceLevelCondition
;

ServiceLevelCondition returns ExecutionRequirements::ServiceLevelCondition:
	 name=ID '{'
//	 ('service-condition:' conditionName = STRING)
 	 ( 'operator:' comparisonOperator = ComparisonOperatorType) //TODO must change to ComparisonOperator
	 ( 'threshold:' threshold = EDouble)
	 ( 'validity:' validity = EDate) ?
	'}'
;

EDate returns ecore::EDate:
	INT '.' INT '.' INT
;


enum ComparisonOperatorType returns dsl::ComparisonOperatorType:
	EQUAL | LESS_THAN | GREATER_THAN | NOT_EQUAL | EQUAL_LESS_THAN | EQUAL_GREATER_THAN
;
	



//ParameterValueTypes returns datasourceParameters::ParameterValueTypes: 
//	value = STRING;


enum TimeUnits returns dsl::TimeUnits:
	SECOND | MINUTE | HOUR | DAY | WEEK | MONTH; 

terminal BOOL_LITERAL returns ecore::EBoolean:
	'true' | 'false';


EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EBoolean returns ecore::EBoolean:
	'true' | 'false';