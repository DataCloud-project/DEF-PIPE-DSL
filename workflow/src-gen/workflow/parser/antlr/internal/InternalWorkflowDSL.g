/*
 * generated by Xtext 2.21.0
 */
grammar InternalWorkflowDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package workflow.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package workflow.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import workflow.services.WorkflowDSLGrammarAccess;

}

@parser::members {

 	private WorkflowDSLGrammarAccess grammarAccess;

    public InternalWorkflowDSLParser(TokenStream input, WorkflowDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "WFModel";
   	}

   	@Override
   	protected WorkflowDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWFModel
entryRuleWFModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWFModelRule()); }
	iv_ruleWFModel=ruleWFModel
	{ $current=$iv_ruleWFModel.current; }
	EOF;

// Rule WFModel
ruleWFModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getWFModelAccess().getWorkflowWorkflowParserRuleCall_0());
			}
			lv_workflow_0_0=ruleWorkflow
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getWFModelRule());
				}
				add(
					$current,
					"workflow",
					lv_workflow_0_0,
					"workflow.WorkflowDSL.Workflow");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleWorkflow
entryRuleWorkflow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowRule()); }
	iv_ruleWorkflow=ruleWorkflow
	{ $current=$iv_ruleWorkflow.current; }
	EOF;

// Rule Workflow
ruleWorkflow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='workflow'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowAccess().getWorkflowKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getWorkflowAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkflowRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getWorkflowAccess().getBaseWorkflowCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_5='parameters:'
			{
				newLeafNode(otherlv_5, grammarAccess.getWorkflowAccess().getParametersKeyword_4_0());
			}
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getWorkflowAccess().getLeftSquareBracketKeyword_4_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getWorkflowAccess().getParamsParameterParserRuleCall_4_2_0_0());
						}
						lv_params_7_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getWorkflowRule());
							}
							add(
								$current,
								"params",
								lv_params_7_0,
								"workflow.WorkflowDSL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getWorkflowAccess().getCommaKeyword_4_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getWorkflowAccess().getParamsParameterParserRuleCall_4_2_1_1_0());
							}
							lv_params_9_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getWorkflowRule());
								}
								add(
									$current,
									"params",
									lv_params_9_0,
									"workflow.WorkflowDSL.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_10=']'
			{
				newLeafNode(otherlv_10, grammarAccess.getWorkflowAccess().getRightSquareBracketKeyword_4_3());
			}
		)?
		(
			otherlv_11='steps:'
			{
				newLeafNode(otherlv_11, grammarAccess.getWorkflowAccess().getStepsKeyword_5_0());
			}
			otherlv_12='['
			{
				newLeafNode(otherlv_12, grammarAccess.getWorkflowAccess().getLeftSquareBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkflowAccess().getStepsStepParserRuleCall_5_2_0());
					}
					lv_steps_13_0=ruleStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkflowRule());
						}
						add(
							$current,
							"steps",
							lv_steps_13_0,
							"workflow.WorkflowDSL.Step");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getWorkflowAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getWorkflowAccess().getStepsStepParserRuleCall_5_3_1_0());
						}
						lv_steps_15_0=ruleStep
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getWorkflowRule());
							}
							add(
								$current,
								"steps",
								lv_steps_15_0,
								"workflow.WorkflowDSL.Step");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_16=']'
			{
				newLeafNode(otherlv_16, grammarAccess.getWorkflowAccess().getRightSquareBracketKeyword_5_4());
			}
		)
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='{'
			{
				newLeafNode(otherlv_0, grammarAccess.getStepAccess().getLeftCurlyBracketKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getStepAccess().getSourceStepParserRuleCall_0_1());
			}
			this_SourceStep_1=ruleSourceStep
			{
				$current = $this_SourceStep_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStepAccess().getIntermediateStepParserRuleCall_1());
		}
		this_IntermediateStep_2=ruleIntermediateStep
		{
			$current = $this_IntermediateStep_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStepAccess().getSinkStepParserRuleCall_2_0());
			}
			this_SinkStep_3=ruleSinkStep
			{
				$current = $this_SinkStep_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getStepAccess().getRightCurlyBracketKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleSourceStep
entryRuleSourceStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceStepRule()); }
	iv_ruleSourceStep=ruleSourceStep
	{ $current=$iv_ruleSourceStep.current; }
	EOF;

// Rule SourceStep
ruleSourceStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSourceStepAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='recurring:'
			{
				newLeafNode(otherlv_1, grammarAccess.getSourceStepAccess().getRecurringKeyword_1_0());
			}
			(
				(
					lv_recurring_2_0=RULE_BOOL_LITERAL
					{
						newLeafNode(lv_recurring_2_0, grammarAccess.getSourceStepAccess().getRecurringBOOL_LITERALTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSourceStepRule());
						}
						setWithLastConsumed(
							$current,
							"recurring",
							lv_recurring_2_0,
							"workflow.WorkflowDSL.BOOL_LITERAL");
					}
				)
			)
		)?
		(
			otherlv_3='parameters:'
			{
				newLeafNode(otherlv_3, grammarAccess.getSourceStepAccess().getParametersKeyword_2_0());
			}
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getSourceStepAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSourceStepAccess().getParamsParameterParserRuleCall_2_2_0_0());
						}
						lv_params_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSourceStepRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"workflow.WorkflowDSL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getSourceStepAccess().getCommaKeyword_2_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSourceStepAccess().getParamsParameterParserRuleCall_2_2_1_1_0());
							}
							lv_params_7_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSourceStepRule());
								}
								add(
									$current,
									"params",
									lv_params_7_0,
									"workflow.WorkflowDSL.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getSourceStepAccess().getRightSquareBracketKeyword_2_3());
			}
		)?
		(
			otherlv_9='writeTo:'
			{
				newLeafNode(otherlv_9, grammarAccess.getSourceStepAccess().getWriteToKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSourceStepAccess().getWriteToMessageQueueParserRuleCall_3_1_0());
					}
					lv_writeTo_10_0=ruleMessageQueue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSourceStepRule());
						}
						set(
							$current,
							"writeTo",
							lv_writeTo_10_0,
							"workflow.WorkflowDSL.MessageQueue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleIntermediateStep
entryRuleIntermediateStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntermediateStepRule()); }
	iv_ruleIntermediateStep=ruleIntermediateStep
	{ $current=$iv_ruleIntermediateStep.current; }
	EOF;

// Rule IntermediateStep
ruleIntermediateStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIntermediateStepAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntermediateStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='recurring:'
			{
				newLeafNode(otherlv_1, grammarAccess.getIntermediateStepAccess().getRecurringKeyword_1_0());
			}
			(
				(
					lv_recurring_2_0=RULE_BOOL_LITERAL
					{
						newLeafNode(lv_recurring_2_0, grammarAccess.getIntermediateStepAccess().getRecurringBOOL_LITERALTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIntermediateStepRule());
						}
						setWithLastConsumed(
							$current,
							"recurring",
							lv_recurring_2_0,
							"workflow.WorkflowDSL.BOOL_LITERAL");
					}
				)
			)
		)?
		(
			otherlv_3='parameters:'
			{
				newLeafNode(otherlv_3, grammarAccess.getIntermediateStepAccess().getParametersKeyword_2_0());
			}
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getIntermediateStepAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIntermediateStepAccess().getParamsParameterParserRuleCall_2_2_0_0());
						}
						lv_params_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIntermediateStepRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"workflow.WorkflowDSL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getIntermediateStepAccess().getCommaKeyword_2_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getIntermediateStepAccess().getParamsParameterParserRuleCall_2_2_1_1_0());
							}
							lv_params_7_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getIntermediateStepRule());
								}
								add(
									$current,
									"params",
									lv_params_7_0,
									"workflow.WorkflowDSL.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getIntermediateStepAccess().getRightSquareBracketKeyword_2_3());
			}
		)?
		(
			otherlv_9='readFrom:'
			{
				newLeafNode(otherlv_9, grammarAccess.getIntermediateStepAccess().getReadFromKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntermediateStepAccess().getReadFromMessageQueueParserRuleCall_3_1_0());
					}
					lv_readFrom_10_0=ruleMessageQueue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntermediateStepRule());
						}
						set(
							$current,
							"readFrom",
							lv_readFrom_10_0,
							"workflow.WorkflowDSL.MessageQueue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_11='writeTo:'
			{
				newLeafNode(otherlv_11, grammarAccess.getIntermediateStepAccess().getWriteToKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntermediateStepAccess().getWriteToMessageQueueParserRuleCall_4_1_0());
					}
					lv_writeTo_12_0=ruleMessageQueue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntermediateStepRule());
						}
						set(
							$current,
							"writeTo",
							lv_writeTo_12_0,
							"workflow.WorkflowDSL.MessageQueue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSinkStep
entryRuleSinkStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSinkStepRule()); }
	iv_ruleSinkStep=ruleSinkStep
	{ $current=$iv_ruleSinkStep.current; }
	EOF;

// Rule SinkStep
ruleSinkStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSinkStepAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSinkStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='recurring:'
			{
				newLeafNode(otherlv_1, grammarAccess.getSinkStepAccess().getRecurringKeyword_1_0());
			}
			(
				(
					lv_recurring_2_0=RULE_BOOL_LITERAL
					{
						newLeafNode(lv_recurring_2_0, grammarAccess.getSinkStepAccess().getRecurringBOOL_LITERALTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSinkStepRule());
						}
						setWithLastConsumed(
							$current,
							"recurring",
							lv_recurring_2_0,
							"workflow.WorkflowDSL.BOOL_LITERAL");
					}
				)
			)
		)?
		(
			otherlv_3='parameters:'
			{
				newLeafNode(otherlv_3, grammarAccess.getSinkStepAccess().getParametersKeyword_2_0());
			}
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getSinkStepAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSinkStepAccess().getParamsParameterParserRuleCall_2_2_0_0());
						}
						lv_params_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSinkStepRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"workflow.WorkflowDSL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getSinkStepAccess().getCommaKeyword_2_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSinkStepAccess().getParamsParameterParserRuleCall_2_2_1_1_0());
							}
							lv_params_7_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSinkStepRule());
								}
								add(
									$current,
									"params",
									lv_params_7_0,
									"workflow.WorkflowDSL.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getSinkStepAccess().getRightSquareBracketKeyword_2_3());
			}
		)?
		(
			otherlv_9='readFrom:'
			{
				newLeafNode(otherlv_9, grammarAccess.getSinkStepAccess().getReadFromKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSinkStepAccess().getReadFromMessageQueueParserRuleCall_3_1_0());
					}
					lv_readFrom_10_0=ruleMessageQueue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSinkStepRule());
						}
						set(
							$current,
							"readFrom",
							lv_readFrom_10_0,
							"workflow.WorkflowDSL.MessageQueue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMessageQueue
entryRuleMessageQueue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageQueueRule()); }
	iv_ruleMessageQueue=ruleMessageQueue
	{ $current=$iv_ruleMessageQueue.current; }
	EOF;

// Rule MessageQueue
ruleMessageQueue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getMessageQueueAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMessageQueueRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getValueParameterValueTypesParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleParameterValueTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"workflow.WorkflowDSL.ParameterValueTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameterValueTypes
entryRuleParameterValueTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterValueTypesRule()); }
	iv_ruleParameterValueTypes=ruleParameterValueTypes
	{ $current=$iv_ruleParameterValueTypes.current; }
	EOF;

// Rule ParameterValueTypes
ruleParameterValueTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterValueTypesAccess().getStringTypeAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_STRING
					{
						newLeafNode(lv_value_1_0, grammarAccess.getParameterValueTypesAccess().getValueSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterValueTypesRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterValueTypesAccess().getIntTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getParameterValueTypesAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterValueTypesRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterValueTypesAccess().getBoolTypeAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_BOOL_LITERAL
					{
						newLeafNode(lv_value_5_0, grammarAccess.getParameterValueTypesAccess().getValueBOOL_LITERALTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterValueTypesRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"workflow.WorkflowDSL.BOOL_LITERAL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getParameterValueTypesAccess().getIdentifierAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_ID
					{
						newLeafNode(lv_value_7_0, grammarAccess.getParameterValueTypesAccess().getValueIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterValueTypesRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

RULE_BOOL_LITERAL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
