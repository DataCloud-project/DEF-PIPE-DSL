/*
 * generated by Xtext 2.21.0
 */
package workflow.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import workflow.services.WorkflowDSLGrammarAccess;
import workflow.workflowDSL.BoolType;
import workflow.workflowDSL.Identifier;
import workflow.workflowDSL.IntType;
import workflow.workflowDSL.IntermediateStep;
import workflow.workflowDSL.MessageQueue;
import workflow.workflowDSL.SinkStep;
import workflow.workflowDSL.SourceStep;
import workflow.workflowDSL.StringType;
import workflow.workflowDSL.WFModel;
import workflow.workflowDSL.Workflow;
import workflow.workflowDSL.WorkflowDSLPackage;

@SuppressWarnings("all")
public class WorkflowDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WorkflowDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WorkflowDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WorkflowDSLPackage.BOOL_TYPE:
				sequence_ParameterValueTypes(context, (BoolType) semanticObject); 
				return; 
			case WorkflowDSLPackage.IDENTIFIER:
				sequence_ParameterValueTypes(context, (Identifier) semanticObject); 
				return; 
			case WorkflowDSLPackage.INT_TYPE:
				sequence_ParameterValueTypes(context, (IntType) semanticObject); 
				return; 
			case WorkflowDSLPackage.INTERMEDIATE_STEP:
				sequence_IntermediateStep(context, (IntermediateStep) semanticObject); 
				return; 
			case WorkflowDSLPackage.MESSAGE_QUEUE:
				sequence_MessageQueue(context, (MessageQueue) semanticObject); 
				return; 
			case WorkflowDSLPackage.PARAMETER:
				sequence_Parameter(context, (workflow.workflowDSL.Parameter) semanticObject); 
				return; 
			case WorkflowDSLPackage.SINK_STEP:
				sequence_SinkStep(context, (SinkStep) semanticObject); 
				return; 
			case WorkflowDSLPackage.SOURCE_STEP:
				sequence_SourceStep(context, (SourceStep) semanticObject); 
				return; 
			case WorkflowDSLPackage.STRING_TYPE:
				sequence_ParameterValueTypes(context, (StringType) semanticObject); 
				return; 
			case WorkflowDSLPackage.WF_MODEL:
				sequence_WFModel(context, (WFModel) semanticObject); 
				return; 
			case WorkflowDSLPackage.WORKFLOW:
				sequence_Workflow(context, (Workflow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Step returns IntermediateStep
	 *     IntermediateStep returns IntermediateStep
	 *
	 * Constraint:
	 *     (name=ID recurring=BOOL_LITERAL? (params+=Parameter params+=Parameter*)? readFrom=MessageQueue writeTo=MessageQueue)
	 */
	protected void sequence_IntermediateStep(ISerializationContext context, IntermediateStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MessageQueue returns MessageQueue
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MessageQueue(ISerializationContext context, MessageQueue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowDSLPackage.Literals.MESSAGE_QUEUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowDSLPackage.Literals.MESSAGE_QUEUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMessageQueueAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValueTypes returns BoolType
	 *
	 * Constraint:
	 *     value=BOOL_LITERAL
	 */
	protected void sequence_ParameterValueTypes(ISerializationContext context, BoolType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowDSLPackage.Literals.BOOL_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowDSLPackage.Literals.BOOL_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterValueTypesAccess().getValueBOOL_LITERALTerminalRuleCall_2_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValueTypes returns Identifier
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_ParameterValueTypes(ISerializationContext context, Identifier semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowDSLPackage.Literals.IDENTIFIER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowDSLPackage.Literals.IDENTIFIER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterValueTypesAccess().getValueIDTerminalRuleCall_3_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValueTypes returns IntType
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_ParameterValueTypes(ISerializationContext context, IntType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowDSLPackage.Literals.INT_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowDSLPackage.Literals.INT_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterValueTypesAccess().getValueINTTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValueTypes returns StringType
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ParameterValueTypes(ISerializationContext context, StringType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorkflowDSLPackage.Literals.STRING_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorkflowDSLPackage.Literals.STRING_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterValueTypesAccess().getValueSTRINGTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID value=ParameterValueTypes?)
	 */
	protected void sequence_Parameter(ISerializationContext context, workflow.workflowDSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns SinkStep
	 *     SinkStep returns SinkStep
	 *
	 * Constraint:
	 *     (name=ID recurring=BOOL_LITERAL? (params+=Parameter params+=Parameter*)? readFrom=MessageQueue)
	 */
	protected void sequence_SinkStep(ISerializationContext context, SinkStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns SourceStep
	 *     SourceStep returns SourceStep
	 *
	 * Constraint:
	 *     (name=ID recurring=BOOL_LITERAL? (params+=Parameter params+=Parameter*)? writeTo=MessageQueue)
	 */
	protected void sequence_SourceStep(ISerializationContext context, SourceStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WFModel returns WFModel
	 *
	 * Constraint:
	 *     workflow+=Workflow+
	 */
	protected void sequence_WFModel(ISerializationContext context, WFModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Workflow returns Workflow
	 *
	 * Constraint:
	 *     (name=ID base=[Workflow|ID]? (params+=Parameter params+=Parameter*)? steps+=Step steps+=Step*)
	 */
	protected void sequence_Workflow(ISerializationContext context, Workflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
