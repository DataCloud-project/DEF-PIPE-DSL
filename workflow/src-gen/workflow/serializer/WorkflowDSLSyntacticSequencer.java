/*
 * generated by Xtext 2.21.0
 */
package workflow.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import workflow.services.WorkflowDSLGrammarAccess;

@SuppressWarnings("all")
public class WorkflowDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected WorkflowDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_IntermediateStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q;
	protected AbstractElementAlias match_SinkStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q;
	protected AbstractElementAlias match_SourceStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q;
	protected AbstractElementAlias match_Workflow___ParametersKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (WorkflowDSLGrammarAccess) access;
		match_IntermediateStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIntermediateStepAccess().getParametersKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getIntermediateStepAccess().getLeftSquareBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getIntermediateStepAccess().getRightSquareBracketKeyword_2_3()));
		match_SinkStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSinkStepAccess().getParametersKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getSinkStepAccess().getLeftSquareBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getSinkStepAccess().getRightSquareBracketKeyword_2_3()));
		match_SourceStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSourceStepAccess().getParametersKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getSourceStepAccess().getLeftSquareBracketKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getSourceStepAccess().getRightSquareBracketKeyword_2_3()));
		match_Workflow___ParametersKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getParametersKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getLeftSquareBracketKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getRightSquareBracketKeyword_4_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_IntermediateStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q.equals(syntax))
				emit_IntermediateStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SinkStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q.equals(syntax))
				emit_SinkStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q.equals(syntax))
				emit_SourceStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ParametersKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q.equals(syntax))
				emit_Workflow___ParametersKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('parameters:' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'readFrom:' readFrom=MessageQueue
	 *     recurring=BOOL_LITERAL (ambiguity) 'readFrom:' readFrom=MessageQueue
	 */
	protected void emit_IntermediateStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('parameters:' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'readFrom:' readFrom=MessageQueue
	 *     recurring=BOOL_LITERAL (ambiguity) 'readFrom:' readFrom=MessageQueue
	 */
	protected void emit_SinkStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('parameters:' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) 'writeTo:' writeTo=MessageQueue
	 *     recurring=BOOL_LITERAL (ambiguity) 'writeTo:' writeTo=MessageQueue
	 */
	protected void emit_SourceStep___ParametersKeyword_2_0_LeftSquareBracketKeyword_2_1_RightSquareBracketKeyword_2_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('parameters:' '[' ']')?
	 *
	 * This ambiguous syntax occurs at:
	 *     base=[Workflow|ID] '{' (ambiguity) 'steps:' '[' steps+=Step
	 *     name=ID '{' (ambiguity) 'steps:' '[' steps+=Step
	 */
	protected void emit_Workflow___ParametersKeyword_4_0_LeftSquareBracketKeyword_4_1_RightSquareBracketKeyword_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
