/*
 * generated by Xtext 2.21.0
 */
package workflow.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WFModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.WFModel");
		private final Assignment cWorkflowAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWorkflowWorkflowParserRuleCall_0 = (RuleCall)cWorkflowAssignment.eContents().get(0);
		
		//WFModel:
		//	workflow+=Workflow*;
		@Override public ParserRule getRule() { return rule; }
		
		//workflow+=Workflow*
		public Assignment getWorkflowAssignment() { return cWorkflowAssignment; }
		
		//Workflow
		public RuleCall getWorkflowWorkflowParserRuleCall_0() { return cWorkflowWorkflowParserRuleCall_0; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBaseWorkflowCrossReference_2_1_0 = (CrossReference)cBaseAssignment_2_1.eContents().get(0);
		private final RuleCall cBaseWorkflowIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBaseWorkflowCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cParamsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_2_0_0 = (RuleCall)cParamsAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_2_1_1_0 = (RuleCall)cParamsAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStepsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cStepsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cStepsStepParserRuleCall_5_2_0 = (RuleCall)cStepsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cStepsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cStepsStepParserRuleCall_5_3_1_0 = (RuleCall)cStepsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Workflow:
		//	'workflow'
		//	name=ID ('extends' base=[Workflow])?
		//	'{' ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')? ('steps:' '[' steps+=Step (','
		//	steps+=Step)* ']')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID ('extends' base=[Workflow])? '{' ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)?
		//']')? ('steps:' '[' steps+=Step (',' steps+=Step)* ']') '}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' base=[Workflow])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//base=[Workflow]
		public Assignment getBaseAssignment_2_1() { return cBaseAssignment_2_1; }
		
		//[Workflow]
		public CrossReference getBaseWorkflowCrossReference_2_1_0() { return cBaseWorkflowCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBaseWorkflowIDTerminalRuleCall_2_1_0_1() { return cBaseWorkflowIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters:'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_2_0() { return cParamsAssignment_4_2_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_2_0_0() { return cParamsParameterParserRuleCall_4_2_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//','
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_2_1_1() { return cParamsAssignment_4_2_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_2_1_1_0() { return cParamsParameterParserRuleCall_4_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//('steps:' '[' steps+=Step (',' steps+=Step)* ']')
		public Group getGroup_5() { return cGroup_5; }
		
		//'steps:'
		public Keyword getStepsKeyword_5_0() { return cStepsKeyword_5_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_1() { return cLeftSquareBracketKeyword_5_1; }
		
		//steps+=Step
		public Assignment getStepsAssignment_5_2() { return cStepsAssignment_5_2; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_2_0() { return cStepsStepParserRuleCall_5_2_0; }
		
		//(',' steps+=Step)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//steps+=Step
		public Assignment getStepsAssignment_5_3_1() { return cStepsAssignment_5_3_1; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_3_1_0() { return cStepsStepParserRuleCall_5_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSourceStepParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIntermediateStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSinkStepParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Step:
		//	'{'
		//	SourceStep | IntermediateStep | SinkStep
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' SourceStep | IntermediateStep | SinkStep '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' SourceStep
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//SourceStep
		public RuleCall getSourceStepParserRuleCall_0_1() { return cSourceStepParserRuleCall_0_1; }
		
		//IntermediateStep
		public RuleCall getIntermediateStepParserRuleCall_1() { return cIntermediateStepParserRuleCall_1; }
		
		//SinkStep '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//SinkStep
		public RuleCall getSinkStepParserRuleCall_2_0() { return cSinkStepParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}
	public class SourceStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.SourceStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRecurringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRecurringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecurringBOOL_LITERALTerminalRuleCall_1_1_0 = (RuleCall)cRecurringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParamsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_2_2_0_0 = (RuleCall)cParamsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_1_0 = (RuleCall)cParamsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWriteToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWriteToAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWriteToMessageQueueParserRuleCall_3_1_0 = (RuleCall)cWriteToAssignment_3_1.eContents().get(0);
		
		//SourceStep:
		//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//	('writeTo:' writeTo=MessageQueue);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//('writeTo:' writeTo=MessageQueue)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('recurring:' recurring=BOOL_LITERAL)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'recurring:'
		public Keyword getRecurringKeyword_1_0() { return cRecurringKeyword_1_0; }
		
		//recurring=BOOL_LITERAL
		public Assignment getRecurringAssignment_1_1() { return cRecurringAssignment_1_1; }
		
		//BOOL_LITERAL
		public RuleCall getRecurringBOOL_LITERALTerminalRuleCall_1_1_0() { return cRecurringBOOL_LITERALTerminalRuleCall_1_1_0; }
		
		//('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parameters:'
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_0() { return cParamsAssignment_2_2_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_0_0() { return cParamsParameterParserRuleCall_2_2_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1_1() { return cParamsAssignment_2_2_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_1_0() { return cParamsParameterParserRuleCall_2_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//('writeTo:' writeTo=MessageQueue)
		public Group getGroup_3() { return cGroup_3; }
		
		//'writeTo:'
		public Keyword getWriteToKeyword_3_0() { return cWriteToKeyword_3_0; }
		
		//writeTo=MessageQueue
		public Assignment getWriteToAssignment_3_1() { return cWriteToAssignment_3_1; }
		
		//MessageQueue
		public RuleCall getWriteToMessageQueueParserRuleCall_3_1_0() { return cWriteToMessageQueueParserRuleCall_3_1_0; }
	}
	public class IntermediateStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.IntermediateStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRecurringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRecurringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecurringBOOL_LITERALTerminalRuleCall_1_1_0 = (RuleCall)cRecurringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParamsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_2_2_0_0 = (RuleCall)cParamsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_1_0 = (RuleCall)cParamsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReadFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReadFromAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReadFromMessageQueueParserRuleCall_3_1_0 = (RuleCall)cReadFromAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWriteToKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWriteToAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWriteToMessageQueueParserRuleCall_4_1_0 = (RuleCall)cWriteToAssignment_4_1.eContents().get(0);
		
		//IntermediateStep:
		//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//	('readFrom:' readFrom=MessageQueue) ('writeTo:' writeTo=MessageQueue);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//('readFrom:' readFrom=MessageQueue) ('writeTo:' writeTo=MessageQueue)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('recurring:' recurring=BOOL_LITERAL)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'recurring:'
		public Keyword getRecurringKeyword_1_0() { return cRecurringKeyword_1_0; }
		
		//recurring=BOOL_LITERAL
		public Assignment getRecurringAssignment_1_1() { return cRecurringAssignment_1_1; }
		
		//BOOL_LITERAL
		public RuleCall getRecurringBOOL_LITERALTerminalRuleCall_1_1_0() { return cRecurringBOOL_LITERALTerminalRuleCall_1_1_0; }
		
		//('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parameters:'
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_0() { return cParamsAssignment_2_2_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_0_0() { return cParamsParameterParserRuleCall_2_2_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1_1() { return cParamsAssignment_2_2_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_1_0() { return cParamsParameterParserRuleCall_2_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//('readFrom:' readFrom=MessageQueue)
		public Group getGroup_3() { return cGroup_3; }
		
		//'readFrom:'
		public Keyword getReadFromKeyword_3_0() { return cReadFromKeyword_3_0; }
		
		//readFrom=MessageQueue
		public Assignment getReadFromAssignment_3_1() { return cReadFromAssignment_3_1; }
		
		//MessageQueue
		public RuleCall getReadFromMessageQueueParserRuleCall_3_1_0() { return cReadFromMessageQueueParserRuleCall_3_1_0; }
		
		//('writeTo:' writeTo=MessageQueue)
		public Group getGroup_4() { return cGroup_4; }
		
		//'writeTo:'
		public Keyword getWriteToKeyword_4_0() { return cWriteToKeyword_4_0; }
		
		//writeTo=MessageQueue
		public Assignment getWriteToAssignment_4_1() { return cWriteToAssignment_4_1; }
		
		//MessageQueue
		public RuleCall getWriteToMessageQueueParserRuleCall_4_1_0() { return cWriteToMessageQueueParserRuleCall_4_1_0; }
	}
	public class SinkStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.SinkStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRecurringKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRecurringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecurringBOOL_LITERALTerminalRuleCall_1_1_0 = (RuleCall)cRecurringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParametersKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParamsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_2_2_0_0 = (RuleCall)cParamsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_1_0 = (RuleCall)cParamsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReadFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReadFromAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReadFromMessageQueueParserRuleCall_3_1_0 = (RuleCall)cReadFromAssignment_3_1.eContents().get(0);
		
		//SinkStep:
		//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//	('readFrom:' readFrom=MessageQueue);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		//('readFrom:' readFrom=MessageQueue)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('recurring:' recurring=BOOL_LITERAL)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'recurring:'
		public Keyword getRecurringKeyword_1_0() { return cRecurringKeyword_1_0; }
		
		//recurring=BOOL_LITERAL
		public Assignment getRecurringAssignment_1_1() { return cRecurringAssignment_1_1; }
		
		//BOOL_LITERAL
		public RuleCall getRecurringBOOL_LITERALTerminalRuleCall_1_1_0() { return cRecurringBOOL_LITERALTerminalRuleCall_1_1_0; }
		
		//('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'parameters:'
		public Keyword getParametersKeyword_2_0() { return cParametersKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_0() { return cParamsAssignment_2_2_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_0_0() { return cParamsParameterParserRuleCall_2_2_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1_1() { return cParamsAssignment_2_2_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_1_0() { return cParamsParameterParserRuleCall_2_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//('readFrom:' readFrom=MessageQueue)
		public Group getGroup_3() { return cGroup_3; }
		
		//'readFrom:'
		public Keyword getReadFromKeyword_3_0() { return cReadFromKeyword_3_0; }
		
		//readFrom=MessageQueue
		public Assignment getReadFromAssignment_3_1() { return cReadFromAssignment_3_1; }
		
		//MessageQueue
		public RuleCall getReadFromMessageQueueParserRuleCall_3_1_0() { return cReadFromMessageQueueParserRuleCall_3_1_0; }
	}
	public class MessageQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.MessageQueue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MessageQueue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueParameterValueTypesParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Parameter:
		//	name=ID ('=' value=ParameterValueTypes)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('=' value=ParameterValueTypes)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' value=ParameterValueTypes)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=ParameterValueTypes
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//ParameterValueTypes
		public RuleCall getValueParameterValueTypesParserRuleCall_1_1_0() { return cValueParameterValueTypesParserRuleCall_1_1_0; }
	}
	public class ParameterValueTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.ParameterValueTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOL_LITERALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIdentifierAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//ParameterValueTypes:
		//	{StringType} value=STRING | {IntType} value=INT | {BoolType} value=BOOL_LITERAL | {Identifier} value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value=STRING | {IntType} value=INT | {BoolType} value=BOOL_LITERAL | {Identifier} value=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringType} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringType}
		public Action getStringTypeAction_0_0() { return cStringTypeAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{IntType} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntType}
		public Action getIntTypeAction_1_0() { return cIntTypeAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{BoolType} value=BOOL_LITERAL
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolType}
		public Action getBoolTypeAction_2_0() { return cBoolTypeAction_2_0; }
		
		//value=BOOL_LITERAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BOOL_LITERAL
		public RuleCall getValueBOOL_LITERALTerminalRuleCall_2_1_0() { return cValueBOOL_LITERALTerminalRuleCall_2_1_0; }
		
		//{Identifier} value=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//{Identifier}
		public Action getIdentifierAction_3_0() { return cIdentifierAction_3_0; }
		
		//value=ID
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_3_1_0() { return cValueIDTerminalRuleCall_3_1_0; }
	}
	
	
	private final WFModelElements pWFModel;
	private final WorkflowElements pWorkflow;
	private final StepElements pStep;
	private final SourceStepElements pSourceStep;
	private final IntermediateStepElements pIntermediateStep;
	private final SinkStepElements pSinkStep;
	private final MessageQueueElements pMessageQueue;
	private final ParameterElements pParameter;
	private final ParameterValueTypesElements pParameterValueTypes;
	private final TerminalRule tBOOL_LITERAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWFModel = new WFModelElements();
		this.pWorkflow = new WorkflowElements();
		this.pStep = new StepElements();
		this.pSourceStep = new SourceStepElements();
		this.pIntermediateStep = new IntermediateStepElements();
		this.pSinkStep = new SinkStepElements();
		this.pMessageQueue = new MessageQueueElements();
		this.pParameter = new ParameterElements();
		this.pParameterValueTypes = new ParameterValueTypesElements();
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "workflow.WorkflowDSL.BOOL_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("workflow.WorkflowDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WFModel:
	//	workflow+=Workflow*;
	public WFModelElements getWFModelAccess() {
		return pWFModel;
	}
	
	public ParserRule getWFModelRule() {
		return getWFModelAccess().getRule();
	}
	
	//Workflow:
	//	'workflow'
	//	name=ID ('extends' base=[Workflow])?
	//	'{' ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')? ('steps:' '[' steps+=Step (','
	//	steps+=Step)* ']')
	//	'}';
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//Step:
	//	'{'
	//	SourceStep | IntermediateStep | SinkStep
	//	'}';
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//SourceStep:
	//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
	//	('writeTo:' writeTo=MessageQueue);
	public SourceStepElements getSourceStepAccess() {
		return pSourceStep;
	}
	
	public ParserRule getSourceStepRule() {
		return getSourceStepAccess().getRule();
	}
	
	//IntermediateStep:
	//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
	//	('readFrom:' readFrom=MessageQueue) ('writeTo:' writeTo=MessageQueue);
	public IntermediateStepElements getIntermediateStepAccess() {
		return pIntermediateStep;
	}
	
	public ParserRule getIntermediateStepRule() {
		return getIntermediateStepAccess().getRule();
	}
	
	//SinkStep:
	//	name=ID ('recurring:' recurring=BOOL_LITERAL)? ('parameters:' '[' (params+=Parameter (',' params+=Parameter)*)? ']')?
	//	('readFrom:' readFrom=MessageQueue);
	public SinkStepElements getSinkStepAccess() {
		return pSinkStep;
	}
	
	public ParserRule getSinkStepRule() {
		return getSinkStepAccess().getRule();
	}
	
	//MessageQueue:
	//	name=ID;
	public MessageQueueElements getMessageQueueAccess() {
		return pMessageQueue;
	}
	
	public ParserRule getMessageQueueRule() {
		return getMessageQueueAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ('=' value=ParameterValueTypes)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterValueTypes:
	//	{StringType} value=STRING | {IntType} value=INT | {BoolType} value=BOOL_LITERAL | {Identifier} value=ID;
	public ParameterValueTypesElements getParameterValueTypesAccess() {
		return pParameterValueTypes;
	}
	
	public ParserRule getParameterValueTypesRule() {
		return getParameterValueTypesAccess().getRule();
	}
	
	//terminal BOOL_LITERAL returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
